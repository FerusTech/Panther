buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
    }
}

def gitHash = getGitHash()
def doSigning = false

subprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "maven"
    apply plugin: "com.github.johnrengelman.shadow"

    if (it.name != "panther-examples") { apply plugin: "signing" }

    group "tech.ferus"
    version = "1.0.0-SNAPSHOT"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    compileJava {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes(
                    'Implementation-Title': project.name,
                    'Implementation-Version': version,
                    'Build-Version': gitHash
            )
        }
    }

    shadowJar {
        classifier = "shaded"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        failOnError = false
        source = sourceSets.main.allJava
        classpath = configurations.compile
        options.memberLevel = JavadocMemberLevel.PRIVATE
    }

    tasks.withType(Jar) {
        buildDir = file("$rootDir/build")
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
        archives shadowJar
    }

    if (it.name != "panther-examples") {
        signing {
            required { doSigning }
            sign configurations.archives
        }
    }

    build {
        dependsOn jar
        dependsOn javadocJar
        dependsOn sourcesJar

        jar.mustRunAfter clean
        javadocJar.mustRunAfter jar
        sourcesJar.mustRunAfter javadocJar
        shadowJar.mustRunAfter sourcesJar
    }
}

private static String getGitHash() {
    def process = "git rev-parse --short HEAD".execute()
    process.waitFor()
    return process.exitValue() ? 'unknown' : process.text.trim()
}

task wrapper(type: Wrapper) {
    gradleVersion = "3.2.1"
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}
